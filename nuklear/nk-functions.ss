(define-nk-func (& nk-context-t)  nk-init-fixed ((arg-0 (* nk-context-t)) (memory void*) (size nk-size-t) (arg-3 (* nk-user-font-t))) "nk_init_fixed")
(define-nk-func (& nk-context-t)  nk-init ((arg-0 (* nk-context-t)) (arg-1 (* nk-allocator-t)) (arg-2 (* nk-user-font-t))) "nk_init")
(define-nk-func (& nk-context-t)  nk-init-custom ((arg-0 (* nk-context-t)) (cmds (* nk-buffer-t)) (pool (* nk-buffer-t)) (arg-3 (* nk-user-font-t))) "nk_init_custom")

(define-nk-func void nk-clear ((arg-0 (* nk-context-t))) "nk_clear")
(define-nk-func void nk-free ((arg-0 (* nk-context-t))) "nk_free")
(define-nk-func void nk-input-begin ((arg-0 (* nk-context-t))) "nk_input_begin")
(define-nk-func void nk-input-motion ((arg-0 (* nk-context-t)) (x int) (y int)) "nk_input_motion")
(define-nk-func void nk-input-key ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (down int)) "nk_input_key")
(define-nk-func void nk-input-button ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (x int) (y int) (down int)) "nk_input_button")
(define-nk-func void nk-input-scroll ((arg-0 (* nk-context-t)) (val (& nk-vec2-t))) "nk_input_scroll")
(define-nk-func void nk-input-char ((arg-0 (* nk-context-t)) (arg-1 char)) "nk_input_char")
(define-nk-func void nk-input-glyph ((arg-0 (* nk-context-t)) (arg-1 nk-glyph-t)) "nk_input_glyph")
(define-nk-func void nk-input-unicode ((arg-0 (* nk-context-t)) (arg-1 nk-rune-t)) "nk_input_unicode")
(define-nk-func void nk-input-end ((arg-0 (* nk-context-t))) "nk_input_end")
(define-nk-func (* nk-command-t) nk--begin ((arg-0 (* nk-context-t))) "nk__begin")
(define-nk-func (* nk-command-t) nk--next ((arg-0 (* nk-context-t)) (arg-1 (* nk-command-t))) "nk__next")
(define-nk-func int nk-begin ((ctx (* nk-context-t)) (title string) (bounds (& nk-rect-t)) (flags nk-flags-t)) "nk_begin")
(define-nk-func int nk-begin-titled ((ctx (* nk-context-t)) (name string) (title string) (bounds (& nk-rect-t)) (flags nk-flags-t)) "nk_begin_titled")
(define-nk-func void nk-end ((ctx (* nk-context-t))) "nk_end")
(define-nk-func (* nk-window-t) nk-window-find ((ctx (* nk-context-t)) (name string)) "nk_window_find")
(define-nk-func (& nk-rect-t) nk-window-get-bounds ((ctx (* nk-context-t))) "nk_window_get_bounds")
(define-nk-func (& nk-vec2-t) nk-window-get-position ((ctx (* nk-context-t))) "nk_window_get_position")
(define-nk-func (& nk-vec2-t) nk-window-get-size ((arg-0 (* nk-context-t))) "nk_window_get_size")
(define-nk-func float nk-window-get-width ((arg-0 (* nk-context-t))) "nk_window_get_width")
(define-nk-func float nk-window-get-height ((arg-0 (* nk-context-t))) "nk_window_get_height")
(define-nk-func (* nk-panel-t) nk-window-get-panel ((arg-0 (* nk-context-t))) "nk_window_get_panel")
(define-nk-func (& nk-rect-t) nk-window-get-content-region ((arg-0 (* nk-context-t))) "nk_window_get_content_region")
(define-nk-func (& nk-vec2-t) nk-window-get-content-region-min ((arg-0 (* nk-context-t))) "nk_window_get_content_region_min")
(define-nk-func (& nk-vec2-t) nk-window-get-content-region-max ((arg-0 (* nk-context-t))) "nk_window_get_content_region_max")
(define-nk-func (& nk-vec2-t) nk-window-get-content-region-size ((arg-0 (* nk-context-t))) "nk_window_get_content_region_size")
(define-nk-func (* nk-command-buffer-t) nk-window-get-canvas ((arg-0 (* nk-context-t))) "nk_window_get_canvas")
(define-nk-func int nk-window-has-focus ((arg-0 (* nk-context-t))) "nk_window_has_focus")
(define-nk-func int nk-window-is-hovered ((arg-0 (* nk-context-t))) "nk_window_is_hovered")
(define-nk-func int nk-window-is-collapsed ((ctx (* nk-context-t)) (name string)) "nk_window_is_collapsed")
(define-nk-func int nk-window-is-closed ((arg-0 (* nk-context-t)) (arg-1 string)) "nk_window_is_closed")
(define-nk-func int nk-window-is-hidden ((arg-0 (* nk-context-t)) (arg-1 string)) "nk_window_is_hidden")
(define-nk-func int nk-window-is-active ((arg-0 (* nk-context-t)) (arg-1 string)) "nk_window_is_active")
(define-nk-func int nk-window-is-any-hovered ((arg-0 (* nk-context-t))) "nk_window_is_any_hovered")
(define-nk-func int nk-item-is-any-active ((arg-0 (* nk-context-t))) "nk_item_is_any_active")
(define-nk-func void nk-window-set-bounds ((arg-0 (* nk-context-t)) (name string) (bounds (& nk-rect-t))) "nk_window_set_bounds")
(define-nk-func void nk-window-set-position ((arg-0 (* nk-context-t)) (name string) (pos (& nk-vec2-t))) "nk_window_set_position")
(define-nk-func void nk-window-set-size ((arg-0 (* nk-context-t)) (name string) (arg-2 (& nk-vec2-t))) "nk_window_set_size")
(define-nk-func void nk-window-set-focus ((arg-0 (* nk-context-t)) (name string)) "nk_window_set_focus")
(define-nk-func void nk-window-close ((ctx (* nk-context-t)) (name string)) "nk_window_close")
(define-nk-func void nk-window-collapse ((arg-0 (* nk-context-t)) (name string) (state unsigned-int)) "nk_window_collapse")
(define-nk-func void nk-window-collapse-if ((arg-0 (* nk-context-t)) (name string) (arg-2 unsigned-int) (cond int)) "nk_window_collapse_if")
(define-nk-func void nk-window-show ((arg-0 (* nk-context-t)) (name string) (arg-2 unsigned-int)) "nk_window_show")
(define-nk-func void nk-window-show-if ((arg-0 (* nk-context-t)) (name string) (arg-2 unsigned-int) (cond int)) "nk_window_show_if")
(define-nk-func void nk-layout-set-min-row-height ((arg-0 (* nk-context-t)) (height float)) "nk_layout_set_min_row_height")
(define-nk-func void nk-layout-reset-min-row-height ((arg-0 (* nk-context-t))) "nk_layout_reset_min_row_height")
(define-nk-func (& nk-rect-t) nk-layout-widget-bounds ((arg-0 (* nk-context-t))) "nk_layout_widget_bounds")
(define-nk-func float nk-layout-ratio-from-pixel ((arg-0 (* nk-context-t)) (pixel_width float)) "nk_layout_ratio_from_pixel")
(define-nk-func void nk-layout-row-dynamic ((ctx (* nk-context-t)) (height float) (cols int)) "nk_layout_row_dynamic")
(define-nk-func void nk-layout-row-static ((ctx (* nk-context-t)) (height float) (item_width int) (cols int)) "nk_layout_row_static")
(define-nk-func void nk-layout-row-begin ((ctx (* nk-context-t)) (fmt unsigned-int) (row_height float) (cols int)) "nk_layout_row_begin")
(define-nk-func void nk-layout-row-push ((arg-0 (* nk-context-t)) (value float)) "nk_layout_row_push")
(define-nk-func void nk-layout-row-end ((arg-0 (* nk-context-t))) "nk_layout_row_end")
(define-nk-func void nk-layout-row ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (height float) (cols int) (ratio (* float))) "nk_layout_row")
(define-nk-func void nk-layout-row-template-begin ((arg-0 (* nk-context-t)) (row_height float)) "nk_layout_row_template_begin")
(define-nk-func void nk-layout-row-template-push-dynamic ((arg-0 (* nk-context-t))) "nk_layout_row_template_push_dynamic")
(define-nk-func void nk-layout-row-template-push-variable ((arg-0 (* nk-context-t)) (min_width float)) "nk_layout_row_template_push_variable")
(define-nk-func void nk-layout-row-template-push-static ((arg-0 (* nk-context-t)) (width float)) "nk_layout_row_template_push_static")
(define-nk-func void nk-layout-row-template-end ((arg-0 (* nk-context-t))) "nk_layout_row_template_end")
(define-nk-func void nk-layout-space-begin ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (height float) (widget_count int)) "nk_layout_space_begin")
(define-nk-func void nk-layout-space-push ((arg-0 (* nk-context-t)) (bounds (& nk-rect-t))) "nk_layout_space_push")
(define-nk-func void nk-layout-space-end ((arg-0 (* nk-context-t))) "nk_layout_space_end")
(define-nk-func (& nk-rect-t) nk-layout-space-bounds ((arg-0 (* nk-context-t))) "nk_layout_space_bounds")
(define-nk-func (& nk-vec2-t) nk-layout-space-to-screen ((arg-0 (* nk-context-t)) (arg-1 (& nk-vec2-t))) "nk_layout_space_to_screen")
(define-nk-func (& nk-vec2-t) nk-layout-space-to-local ((arg-0 (* nk-context-t)) (arg-1 (& nk-vec2-t))) "nk_layout_space_to_local")
(define-nk-func (& nk-rect-t) nk-layout-space-rect-to-screen ((arg-0 (* nk-context-t)) (arg-1 (& nk-rect-t))) "nk_layout_space_rect_to_screen")
(define-nk-func (& nk-rect-t) nk-layout-space-rect-to-local ((arg-0 (* nk-context-t)) (arg-1 (& nk-rect-t))) "nk_layout_space_rect_to_local")
(define-nk-func int nk-group-begin ((arg-0 (* nk-context-t)) (title string) (arg-2 nk-flags-t)) "nk_group_begin")
(define-nk-func int nk-group-begin-titled ((arg-0 (* nk-context-t)) (name string) (title string) (arg-3 nk-flags-t)) "nk_group_begin_titled")
(define-nk-func void nk-group-end ((arg-0 (* nk-context-t))) "nk_group_end")
(define-nk-func int nk-group-scrolled-offset-begin ((arg-0 (* nk-context-t)) (x_offset (* nk-uint-t)) (y_offset (* nk-uint-t)) (title string) (flags nk-flags-t)) "nk_group_scrolled_offset_begin")
(define-nk-func int nk-group-scrolled-begin ((arg-0 (* nk-context-t)) (off (* nk-scroll-t)) (title string) (arg-3 nk-flags-t)) "nk_group_scrolled_begin")
(define-nk-func void nk-group-scrolled-end ((arg-0 (* nk-context-t))) "nk_group_scrolled_end")
(define-nk-func int nk-tree-push-hashed ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (title string) (initial_state unsigned-int) (hash string) (len int) (seed int)) "nk_tree_push_hashed")
(define-nk-func int nk-tree-image-push-hashed ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (arg-2 (& nk-image-t)) (title string) (initial_state unsigned-int) (hash string) (len int) (seed int)) "nk_tree_image_push_hashed")
(define-nk-func void nk-tree-pop ((arg-0 (* nk-context-t))) "nk_tree_pop")
(define-nk-func int nk-tree-state-push ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (title string) (state (* unsigned-int))) "nk_tree_state_push")
(define-nk-func int nk-tree-state-image-push ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (arg-2 (& nk-image-t)) (title string) (state (* unsigned-int))) "nk_tree_state_image_push")
(define-nk-func void nk-tree-state-pop ((arg-0 (* nk-context-t))) "nk_tree_state_pop")
(define-nk-func int nk-tree-element-push-hashed ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (title string) (initial_state unsigned-int) (selected (* int)) (hash string) (len int) (seed int)) "nk_tree_element_push_hashed")
(define-nk-func int nk-tree-element-image-push-hashed ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (arg-2 (& nk-image-t)) (title string) (initial_state unsigned-int) (selected (* int)) (hash string) (len int) (seed int)) "nk_tree_element_image_push_hashed")
(define-nk-func void nk-tree-element-pop ((arg-0 (* nk-context-t))) "nk_tree_element_pop")
(define-nk-func int nk-list-view-begin ((arg-0 (* nk-context-t)) (out (* nk-list-view-t)) (id string) (arg-3 nk-flags-t) (row_height int) (row_count int)) "nk_list_view_begin")
(define-nk-func void nk-list-view-end ((arg-0 (* nk-list-view-t))) "nk_list_view_end")
(define-nk-func unsigned-int nk-widget ((arg-0 (* nk-rect-t)) (arg-1 (* nk-context-t))) "nk_widget")
(define-nk-func unsigned-int nk-widget-fitting ((arg-0 (* nk-rect-t)) (arg-1 (* nk-context-t)) (arg-2 (& nk-vec2-t))) "nk_widget_fitting")
(define-nk-func (& nk-rect-t) nk-widget-bounds ((arg-0 (* nk-context-t))) "nk_widget_bounds")
(define-nk-func (& nk-vec2-t) nk-widget-position ((arg-0 (* nk-context-t))) "nk_widget_position")
(define-nk-func (& nk-vec2-t) nk-widget-size ((arg-0 (* nk-context-t))) "nk_widget_size")
(define-nk-func float nk-widget-width ((arg-0 (* nk-context-t))) "nk_widget_width")
(define-nk-func float nk-widget-height ((arg-0 (* nk-context-t))) "nk_widget_height")
(define-nk-func int nk-widget-is-hovered ((arg-0 (* nk-context-t))) "nk_widget_is_hovered")
(define-nk-func int nk-widget-is-mouse-clicked ((arg-0 (* nk-context-t)) (arg-1 unsigned-int)) "nk_widget_is_mouse_clicked")
(define-nk-func int nk-widget-has-mouse-click-down ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (down int)) "nk_widget_has_mouse_click_down")
(define-nk-func void nk-spacing ((arg-0 (* nk-context-t)) (cols int)) "nk_spacing")
(define-nk-func void nk-text ((arg-0 (* nk-context-t)) (arg-1 string) (arg-2 int) (arg-3 nk-flags-t)) "nk_text")
(define-nk-func void nk-text-colored ((arg-0 (* nk-context-t)) (arg-1 string) (arg-2 int) (arg-3 nk-flags-t) (arg-4 (& nk-color-t))) "nk_text_colored")
(define-nk-func void nk-text-wrap ((arg-0 (* nk-context-t)) (arg-1 string) (arg-2 int)) "nk_text_wrap")
(define-nk-func void nk-text-wrap-colored ((arg-0 (* nk-context-t)) (arg-1 string) (arg-2 int) (arg-3 (& nk-color-t))) "nk_text_wrap_colored")
(define-nk-func void nk-label ((arg-0 (* nk-context-t)) (arg-1 string) (align nk-flags-t)) "nk_label")
(define-nk-func void nk-label-colored ((arg-0 (* nk-context-t)) (arg-1 string) (align nk-flags-t) (arg-3 (& nk-color-t))) "nk_label_colored")
(define-nk-func void nk-label-wrap ((arg-0 (* nk-context-t)) (arg-1 string)) "nk_label_wrap")
(define-nk-func void nk-label-colored-wrap ((arg-0 (* nk-context-t)) (arg-1 string) (arg-2 (& nk-color-t))) "nk_label_colored_wrap")
(define-nk-func void nk-image ((arg-0 (* nk-context-t)) (arg-1 (& nk-image-t))) "nk_image")
(define-nk-func void nk-image-color ((arg-0 (* nk-context-t)) (arg-1 (& nk-image-t)) (arg-2 (& nk-color-t))) "nk_image_color")
(define-nk-func int nk-button-text ((arg-0 (* nk-context-t)) (title string) (len int)) "nk_button_text")
(define-nk-func int nk-button-label ((arg-0 (* nk-context-t)) (title string)) "nk_button_label")
(define-nk-func int nk-button-color ((arg-0 (* nk-context-t)) (arg-1 (& nk-color-t))) "nk_button_color")
(define-nk-func int nk-button-symbol ((arg-0 (* nk-context-t)) (arg-1 unsigned-int)) "nk_button_symbol")
(define-nk-func int nk-button-image ((arg-0 (* nk-context-t)) (img (& nk-image-t))) "nk_button_image")
(define-nk-func int nk-button-symbol-label ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (arg-2 string) (text_alignment nk-flags-t)) "nk_button_symbol_label")
(define-nk-func int nk-button-symbol-text ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (arg-2 string) (arg-3 int) (alignment nk-flags-t)) "nk_button_symbol_text")
(define-nk-func int nk-button-image-label ((arg-0 (* nk-context-t)) (img (& nk-image-t)) (arg-2 string) (text_alignment nk-flags-t)) "nk_button_image_label")
(define-nk-func int nk-button-image-text ((arg-0 (* nk-context-t)) (img (& nk-image-t)) (arg-2 string) (arg-3 int) (alignment nk-flags-t)) "nk_button_image_text")
(define-nk-func int nk-button-text-styled ((arg-0 (* nk-context-t)) (arg-1 (* nk-style-button-t)) (title string) (len int)) "nk_button_text_styled")
(define-nk-func int nk-button-label-styled ((arg-0 (* nk-context-t)) (arg-1 (* nk-style-button-t)) (title string)) "nk_button_label_styled")
(define-nk-func int nk-button-symbol-styled ((arg-0 (* nk-context-t)) (arg-1 (* nk-style-button-t)) (arg-2 unsigned-int)) "nk_button_symbol_styled")
(define-nk-func int nk-button-image-styled ((arg-0 (* nk-context-t)) (arg-1 (* nk-style-button-t)) (img (& nk-image-t))) "nk_button_image_styled")
(define-nk-func int nk-button-symbol-text-styled ((arg-0 (* nk-context-t)) (arg-1 (* nk-style-button-t)) (arg-2 unsigned-int) (arg-3 string) (arg-4 int) (alignment nk-flags-t)) "nk_button_symbol_text_styled")
(define-nk-func int nk-button-symbol-label-styled ((ctx (* nk-context-t)) (style (* nk-style-button-t)) (symbol unsigned-int) (title string) (align nk-flags-t)) "nk_button_symbol_label_styled")
(define-nk-func int nk-button-image-label-styled ((arg-0 (* nk-context-t)) (arg-1 (* nk-style-button-t)) (img (& nk-image-t)) (arg-3 string) (text_alignment nk-flags-t)) "nk_button_image_label_styled")
(define-nk-func int nk-button-image-text-styled ((arg-0 (* nk-context-t)) (arg-1 (* nk-style-button-t)) (img (& nk-image-t)) (arg-3 string) (arg-4 int) (alignment nk-flags-t)) "nk_button_image_text_styled")
(define-nk-func void nk-button-set-behavior ((arg-0 (* nk-context-t)) (arg-1 unsigned-int)) "nk_button_set_behavior")
(define-nk-func int nk-button-push-behavior ((arg-0 (* nk-context-t)) (arg-1 unsigned-int)) "nk_button_push_behavior")
(define-nk-func int nk-button-pop-behavior ((arg-0 (* nk-context-t))) "nk_button_pop_behavior")
(define-nk-func int nk-check-label ((arg-0 (* nk-context-t)) (arg-1 string) (active int)) "nk_check_label")
(define-nk-func int nk-check-text ((arg-0 (* nk-context-t)) (arg-1 string) (arg-2 int) (active int)) "nk_check_text")
(define-nk-func unsigned-int nk-check-flags-label ((arg-0 (* nk-context-t)) (arg-1 string) (flags unsigned-int) (value unsigned-int)) "nk_check_flags_label")
(define-nk-func unsigned-int nk-check-flags-text ((arg-0 (* nk-context-t)) (arg-1 string) (arg-2 int) (flags unsigned-int) (value unsigned-int)) "nk_check_flags_text")
(define-nk-func int nk-checkbox-label ((arg-0 (* nk-context-t)) (arg-1 string) (active (* int))) "nk_checkbox_label")
(define-nk-func int nk-checkbox-text ((arg-0 (* nk-context-t)) (arg-1 string) (arg-2 int) (active (* int))) "nk_checkbox_text")
(define-nk-func int nk-checkbox-flags-label ((arg-0 (* nk-context-t)) (arg-1 string) (flags (* unsigned-int)) (value unsigned-int)) "nk_checkbox_flags_label")
(define-nk-func int nk-checkbox-flags-text ((arg-0 (* nk-context-t)) (arg-1 string) (arg-2 int) (flags (* unsigned-int)) (value unsigned-int)) "nk_checkbox_flags_text")
(define-nk-func int nk-radio-label ((arg-0 (* nk-context-t)) (arg-1 string) (active (* int))) "nk_radio_label")
(define-nk-func int nk-radio-text ((arg-0 (* nk-context-t)) (arg-1 string) (arg-2 int) (active (* int))) "nk_radio_text")
(define-nk-func int nk-option-label ((arg-0 (* nk-context-t)) (arg-1 string) (active int)) "nk_option_label")
(define-nk-func int nk-option-text ((arg-0 (* nk-context-t)) (arg-1 string) (arg-2 int) (active int)) "nk_option_text")
(define-nk-func int nk-selectable-label ((arg-0 (* nk-context-t)) (arg-1 string) (align nk-flags-t) (value (* int))) "nk_selectable_label")
(define-nk-func int nk-selectable-text ((arg-0 (* nk-context-t)) (arg-1 string) (arg-2 int) (align nk-flags-t) (value (* int))) "nk_selectable_text")
(define-nk-func int nk-selectable-image-label ((arg-0 (* nk-context-t)) (arg-1 (& nk-image-t)) (arg-2 string) (align nk-flags-t) (value (* int))) "nk_selectable_image_label")
(define-nk-func int nk-selectable-image-text ((arg-0 (* nk-context-t)) (arg-1 (& nk-image-t)) (arg-2 string) (arg-3 int) (align nk-flags-t) (value (* int))) "nk_selectable_image_text")
(define-nk-func int nk-selectable-symbol-label ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (arg-2 string) (align nk-flags-t) (value (* int))) "nk_selectable_symbol_label")
(define-nk-func int nk-selectable-symbol-text ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (arg-2 string) (arg-3 int) (align nk-flags-t) (value (* int))) "nk_selectable_symbol_text")
(define-nk-func int nk-select-label ((arg-0 (* nk-context-t)) (arg-1 string) (align nk-flags-t) (value int)) "nk_select_label")
(define-nk-func int nk-select-text ((arg-0 (* nk-context-t)) (arg-1 string) (arg-2 int) (align nk-flags-t) (value int)) "nk_select_text")
(define-nk-func int nk-select-image-label ((arg-0 (* nk-context-t)) (arg-1 (& nk-image-t)) (arg-2 string) (align nk-flags-t) (value int)) "nk_select_image_label")
(define-nk-func int nk-select-image-text ((arg-0 (* nk-context-t)) (arg-1 (& nk-image-t)) (arg-2 string) (arg-3 int) (align nk-flags-t) (value int)) "nk_select_image_text")
(define-nk-func int nk-select-symbol-label ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (arg-2 string) (align nk-flags-t) (value int)) "nk_select_symbol_label")
(define-nk-func int nk-select-symbol-text ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (arg-2 string) (arg-3 int) (align nk-flags-t) (value int)) "nk_select_symbol_text")
(define-nk-func float nk-slide-float ((arg-0 (* nk-context-t)) (min float) (val float) (max float) (step float)) "nk_slide_float")
(define-nk-func int nk-slide-int ((arg-0 (* nk-context-t)) (min int) (val int) (max int) (step int)) "nk_slide_int")
(define-nk-func int nk-slider-float ((arg-0 (* nk-context-t)) (min float) (val (* float)) (max float) (step float)) "nk_slider_float")
(define-nk-func int nk-slider-int ((arg-0 (* nk-context-t)) (min int) (val (* int)) (max int) (step int)) "nk_slider_int")
(define-nk-func int nk-progress ((arg-0 (* nk-context-t)) (cur (* nk-size-t)) (max nk-size-t) (modifyable int)) "nk_progress")
(define-nk-func nk-size-t nk-prog ((arg-0 (* nk-context-t)) (cur nk-size-t) (max nk-size-t) (modifyable int)) "nk_prog")
(define-nk-func (& nk-colorf-t) nk-color-picker ((arg-0 (* nk-context-t)) (arg-1 (& nk-colorf-t)) (arg-2 unsigned-int)) "nk_color_picker")
(define-nk-func int nk-color-pick ((arg-0 (* nk-context-t)) (arg-1 (* nk-colorf-t)) (arg-2 unsigned-int)) "nk_color_pick")
(define-nk-func void nk-property-int ((arg-0 (* nk-context-t)) (name string) (min int) (val (* int)) (max int) (step int) (inc_per_pixel float)) "nk_property_int")
(define-nk-func void nk-property-float ((arg-0 (* nk-context-t)) (name string) (min float) (val (* float)) (max float) (step float) (inc_per_pixel float)) "nk_property_float")
(define-nk-func void nk-property-double ((arg-0 (* nk-context-t)) (name string) (min double) (val (* double)) (max double) (step double) (inc_per_pixel float)) "nk_property_double")
(define-nk-func int nk-propertyi ((arg-0 (* nk-context-t)) (name string) (min int) (val int) (max int) (step int) (inc_per_pixel float)) "nk_propertyi")
(define-nk-func float nk-propertyf ((arg-0 (* nk-context-t)) (name string) (min float) (val float) (max float) (step float) (inc_per_pixel float)) "nk_propertyf")
(define-nk-func double nk-propertyd ((arg-0 (* nk-context-t)) (name string) (min double) (val double) (max double) (step double) (inc_per_pixel float)) "nk_propertyd")
(define-nk-func nk-flags-t nk-edit-string ((arg-0 (* nk-context-t)) (arg-1 nk-flags-t) (buffer string) (len (* int)) (max int) (arg-5 nk-plugin-filter-t)) "nk_edit_string")
(define-nk-func nk-flags-t nk-edit-string-zero-terminated ((arg-0 (* nk-context-t)) (arg-1 nk-flags-t) (buffer string) (max int) (arg-4 nk-plugin-filter-t)) "nk_edit_string_zero_terminated")
(define-nk-func nk-flags-t nk-edit-buffer ((arg-0 (* nk-context-t)) (arg-1 nk-flags-t) (arg-2 (* nk-text-edit-t)) (arg-3 nk-plugin-filter-t)) "nk_edit_buffer")
(define-nk-func void nk-edit-focus ((arg-0 (* nk-context-t)) (flags nk-flags-t)) "nk_edit_focus")
(define-nk-func void nk-edit-unfocus ((arg-0 (* nk-context-t))) "nk_edit_unfocus")
(define-nk-func int nk-chart-begin ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (num int) (min float) (max float)) "nk_chart_begin")
(define-nk-func int nk-chart-begin-colored ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (arg-2 (& nk-color-t)) (active (& nk-color-t)) (num int) (min float) (max float)) "nk_chart_begin_colored")
(define-nk-func void nk-chart-add-slot ((ctx (* nk-context-t)) (arg-1 unsigned-int) (count int) (min_value float) (max_value float)) "nk_chart_add_slot")
(define-nk-func void nk-chart-add-slot-colored ((ctx (* nk-context-t)) (arg-1 unsigned-int) (arg-2 (& nk-color-t)) (active (& nk-color-t)) (count int) (min_value float) (max_value float)) "nk_chart_add_slot_colored")
(define-nk-func nk-flags-t nk-chart-push ((arg-0 (* nk-context-t)) (arg-1 float)) "nk_chart_push")
(define-nk-func nk-flags-t nk-chart-push-slot ((arg-0 (* nk-context-t)) (arg-1 float) (arg-2 int)) "nk_chart_push_slot")
(define-nk-func void nk-chart-end ((arg-0 (* nk-context-t))) "nk_chart_end")
(define-nk-func void nk-plot ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (values (* float)) (count int) (offset int)) "nk_plot")
(define-nk-func void nk-plot-function ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (userdata void*) (value_getter void*) (count int) (offset int)) "nk_plot_function")
(define-nk-func int nk-popup-begin ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (arg-2 string) (arg-3 nk-flags-t) (bounds (& nk-rect-t))) "nk_popup_begin")
(define-nk-func void nk-popup-close ((arg-0 (* nk-context-t))) "nk_popup_close")
(define-nk-func void nk-popup-end ((arg-0 (* nk-context-t))) "nk_popup_end")
(define-nk-func int nk-combo ((arg-0 (* nk-context-t)) (items void*) (count int) (selected int) (item_height int) (size (& nk-vec2-t))) "nk_combo")
(define-nk-func int nk-combo-separator ((arg-0 (* nk-context-t)) (items_separated_by_separator string) (separator int) (selected int) (count int) (item_height int) (size (& nk-vec2-t))) "nk_combo_separator")
(define-nk-func int nk-combo-string ((arg-0 (* nk-context-t)) (items_separated_by_zeros string) (selected int) (count int) (item_height int) (size (& nk-vec2-t))) "nk_combo_string")
(define-nk-func int nk-combo-callback ((arg-0 (* nk-context-t)) (item_getter void*) (userdata void*) (selected int) (count int) (item_height int) (size (& nk-vec2-t))) "nk_combo_callback")
(define-nk-func void nk-combobox ((arg-0 (* nk-context-t)) (items void*) (count int) (selected (* int)) (item_height int) (size (& nk-vec2-t))) "nk_combobox")
(define-nk-func void nk-combobox-string ((arg-0 (* nk-context-t)) (items_separated_by_zeros string) (selected (* int)) (count int) (item_height int) (size (& nk-vec2-t))) "nk_combobox_string")
(define-nk-func void nk-combobox-separator ((arg-0 (* nk-context-t)) (items_separated_by_separator string) (separator int) (selected (* int)) (count int) (item_height int) (size (& nk-vec2-t))) "nk_combobox_separator")
(define-nk-func void nk-combobox-callback ((arg-0 (* nk-context-t)) (item_getter void*) (arg-2 void*) (selected (* int)) (count int) (item_height int) (size (& nk-vec2-t))) "nk_combobox_callback")
(define-nk-func int nk-combo-begin-text ((arg-0 (* nk-context-t)) (selected string) (arg-2 int) (size (& nk-vec2-t))) "nk_combo_begin_text")
(define-nk-func int nk-combo-begin-label ((arg-0 (* nk-context-t)) (selected string) (size (& nk-vec2-t))) "nk_combo_begin_label")
(define-nk-func int nk-combo-begin-color ((arg-0 (* nk-context-t)) (color (& nk-color-t)) (size (& nk-vec2-t))) "nk_combo_begin_color")
(define-nk-func int nk-combo-begin-symbol ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (size (& nk-vec2-t))) "nk_combo_begin_symbol")
(define-nk-func int nk-combo-begin-symbol-label ((arg-0 (* nk-context-t)) (selected string) (arg-2 unsigned-int) (size (& nk-vec2-t))) "nk_combo_begin_symbol_label")
(define-nk-func int nk-combo-begin-symbol-text ((arg-0 (* nk-context-t)) (selected string) (arg-2 int) (arg-3 unsigned-int) (size (& nk-vec2-t))) "nk_combo_begin_symbol_text")
(define-nk-func int nk-combo-begin-image ((arg-0 (* nk-context-t)) (img (& nk-image-t)) (size (& nk-vec2-t))) "nk_combo_begin_image")
(define-nk-func int nk-combo-begin-image-label ((arg-0 (* nk-context-t)) (selected string) (arg-2 (& nk-image-t)) (size (& nk-vec2-t))) "nk_combo_begin_image_label")
(define-nk-func int nk-combo-begin-image-text ((arg-0 (* nk-context-t)) (selected string) (arg-2 int) (arg-3 (& nk-image-t)) (size (& nk-vec2-t))) "nk_combo_begin_image_text")
(define-nk-func int nk-combo-item-label ((arg-0 (* nk-context-t)) (arg-1 string) (alignment nk-flags-t)) "nk_combo_item_label")
(define-nk-func int nk-combo-item-text ((arg-0 (* nk-context-t)) (arg-1 string) (arg-2 int) (alignment nk-flags-t)) "nk_combo_item_text")
(define-nk-func int nk-combo-item-image-label ((arg-0 (* nk-context-t)) (arg-1 (& nk-image-t)) (arg-2 string) (alignment nk-flags-t)) "nk_combo_item_image_label")
(define-nk-func int nk-combo-item-image-text ((arg-0 (* nk-context-t)) (arg-1 (& nk-image-t)) (arg-2 string) (arg-3 int) (alignment nk-flags-t)) "nk_combo_item_image_text")
(define-nk-func int nk-combo-item-symbol-label ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (arg-2 string) (alignment nk-flags-t)) "nk_combo_item_symbol_label")
(define-nk-func int nk-combo-item-symbol-text ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (arg-2 string) (arg-3 int) (alignment nk-flags-t)) "nk_combo_item_symbol_text")
(define-nk-func void nk-combo-close ((arg-0 (* nk-context-t))) "nk_combo_close")
(define-nk-func void nk-combo-end ((arg-0 (* nk-context-t))) "nk_combo_end")
(define-nk-func int nk-contextual-begin ((arg-0 (* nk-context-t)) (arg-1 nk-flags-t) (arg-2 (& nk-vec2-t)) (trigger_bounds (& nk-rect-t))) "nk_contextual_begin")
(define-nk-func int nk-contextual-item-text ((arg-0 (* nk-context-t)) (arg-1 string) (arg-2 int) (align nk-flags-t)) "nk_contextual_item_text")
(define-nk-func int nk-contextual-item-label ((arg-0 (* nk-context-t)) (arg-1 string) (align nk-flags-t)) "nk_contextual_item_label")
(define-nk-func int nk-contextual-item-image-label ((arg-0 (* nk-context-t)) (arg-1 (& nk-image-t)) (arg-2 string) (alignment nk-flags-t)) "nk_contextual_item_image_label")
(define-nk-func int nk-contextual-item-image-text ((arg-0 (* nk-context-t)) (arg-1 (& nk-image-t)) (arg-2 string) (len int) (alignment nk-flags-t)) "nk_contextual_item_image_text")
(define-nk-func int nk-contextual-item-symbol-label ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (arg-2 string) (alignment nk-flags-t)) "nk_contextual_item_symbol_label")
(define-nk-func int nk-contextual-item-symbol-text ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (arg-2 string) (arg-3 int) (alignment nk-flags-t)) "nk_contextual_item_symbol_text")
(define-nk-func void nk-contextual-close ((arg-0 (* nk-context-t))) "nk_contextual_close")
(define-nk-func void nk-contextual-end ((arg-0 (* nk-context-t))) "nk_contextual_end")
(define-nk-func void nk-tooltip ((arg-0 (* nk-context-t)) (arg-1 string)) "nk_tooltip")
(define-nk-func int nk-tooltip-begin ((arg-0 (* nk-context-t)) (width float)) "nk_tooltip_begin")
(define-nk-func void nk-tooltip-end ((arg-0 (* nk-context-t))) "nk_tooltip_end")
(define-nk-func void nk-menubar-begin ((arg-0 (* nk-context-t))) "nk_menubar_begin")
(define-nk-func void nk-menubar-end ((arg-0 (* nk-context-t))) "nk_menubar_end")
(define-nk-func int nk-menu-begin-text ((arg-0 (* nk-context-t)) (title string) (title_len int) (align nk-flags-t) (size (& nk-vec2-t))) "nk_menu_begin_text")
(define-nk-func int nk-menu-begin-label ((arg-0 (* nk-context-t)) (arg-1 string) (align nk-flags-t) (size (& nk-vec2-t))) "nk_menu_begin_label")
(define-nk-func int nk-menu-begin-image ((arg-0 (* nk-context-t)) (arg-1 string) (arg-2 (& nk-image-t)) (size (& nk-vec2-t))) "nk_menu_begin_image")
(define-nk-func int nk-menu-begin-image-text ((arg-0 (* nk-context-t)) (arg-1 string) (arg-2 int) (align nk-flags-t) (arg-4 (& nk-image-t)) (size (& nk-vec2-t))) "nk_menu_begin_image_text")
(define-nk-func int nk-menu-begin-image-label ((arg-0 (* nk-context-t)) (arg-1 string) (align nk-flags-t) (arg-3 (& nk-image-t)) (size (& nk-vec2-t))) "nk_menu_begin_image_label")
(define-nk-func int nk-menu-begin-symbol ((arg-0 (* nk-context-t)) (arg-1 string) (arg-2 unsigned-int) (size (& nk-vec2-t))) "nk_menu_begin_symbol")
(define-nk-func int nk-menu-begin-symbol-text ((arg-0 (* nk-context-t)) (arg-1 string) (arg-2 int) (align nk-flags-t) (arg-4 unsigned-int) (size (& nk-vec2-t))) "nk_menu_begin_symbol_text")
(define-nk-func int nk-menu-begin-symbol-label ((arg-0 (* nk-context-t)) (arg-1 string) (align nk-flags-t) (arg-3 unsigned-int) (size (& nk-vec2-t))) "nk_menu_begin_symbol_label")
(define-nk-func int nk-menu-item-text ((arg-0 (* nk-context-t)) (arg-1 string) (arg-2 int) (align nk-flags-t)) "nk_menu_item_text")
(define-nk-func int nk-menu-item-label ((arg-0 (* nk-context-t)) (arg-1 string) (alignment nk-flags-t)) "nk_menu_item_label")
(define-nk-func int nk-menu-item-image-label ((arg-0 (* nk-context-t)) (arg-1 (& nk-image-t)) (arg-2 string) (alignment nk-flags-t)) "nk_menu_item_image_label")
(define-nk-func int nk-menu-item-image-text ((arg-0 (* nk-context-t)) (arg-1 (& nk-image-t)) (arg-2 string) (len int) (alignment nk-flags-t)) "nk_menu_item_image_text")
(define-nk-func int nk-menu-item-symbol-text ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (arg-2 string) (arg-3 int) (alignment nk-flags-t)) "nk_menu_item_symbol_text")
(define-nk-func int nk-menu-item-symbol-label ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (arg-2 string) (alignment nk-flags-t)) "nk_menu_item_symbol_label")
(define-nk-func void nk-menu-close ((arg-0 (* nk-context-t))) "nk_menu_close")
(define-nk-func void nk-menu-end ((arg-0 (* nk-context-t))) "nk_menu_end")
(define-nk-func void nk-style-default ((arg-0 (* nk-context-t))) "nk_style_default")
(define-nk-func void nk-style-from-table ((arg-0 (* nk-context-t)) (arg-1 (* nk-color-t))) "nk_style_from_table")
(define-nk-func void nk-style-load-cursor ((arg-0 (* nk-context-t)) (arg-1 unsigned-int) (arg-2 (* nk-cursor-t))) "nk_style_load_cursor")
(define-nk-func void nk-style-load-all-cursors ((arg-0 (* nk-context-t)) (arg-1 (* nk-cursor-t))) "nk_style_load_all_cursors")
(define-nk-func string nk-style-get-color-by-name ((arg-0 unsigned-int)) "nk_style_get_color_by_name")
(define-nk-func void nk-style-set-font ((arg-0 (* nk-context-t)) (arg-1 (* nk-user-font-t))) "nk_style_set_font")
(define-nk-func int nk-style-set-cursor ((arg-0 (* nk-context-t)) (arg-1 unsigned-int)) "nk_style_set_cursor")
(define-nk-func void nk-style-show-cursor ((arg-0 (* nk-context-t))) "nk_style_show_cursor")
(define-nk-func void nk-style-hide-cursor ((arg-0 (* nk-context-t))) "nk_style_hide_cursor")
(define-nk-func int nk-style-push-font ((arg-0 (* nk-context-t)) (arg-1 (* nk-user-font-t))) "nk_style_push_font")
(define-nk-func int nk-style-push-float ((arg-0 (* nk-context-t)) (arg-1 (* float)) (arg-2 float)) "nk_style_push_float")
(define-nk-func int nk-style-push-vec2 ((arg-0 (* nk-context-t)) (arg-1 (* nk-vec2-t)) (arg-2 (& nk-vec2-t))) "nk_style_push_vec2")
(define-nk-func int nk-style-push-style-item ((arg-0 (* nk-context-t)) (arg-1 (* nk-style-item-t)) (arg-2 (& nk-style-item-t))) "nk_style_push_style_item")
(define-nk-func int nk-style-push-flags ((arg-0 (* nk-context-t)) (arg-1 (* nk-flags-t)) (arg-2 nk-flags-t)) "nk_style_push_flags")
(define-nk-func int nk-style-push-color ((arg-0 (* nk-context-t)) (arg-1 (* nk-color-t)) (arg-2 (& nk-color-t))) "nk_style_push_color")
(define-nk-func int nk-style-pop-font ((arg-0 (* nk-context-t))) "nk_style_pop_font")
(define-nk-func int nk-style-pop-float ((arg-0 (* nk-context-t))) "nk_style_pop_float")
(define-nk-func int nk-style-pop-vec2 ((arg-0 (* nk-context-t))) "nk_style_pop_vec2")
(define-nk-func int nk-style-pop-style-item ((arg-0 (* nk-context-t))) "nk_style_pop_style_item")
(define-nk-func int nk-style-pop-flags ((arg-0 (* nk-context-t))) "nk_style_pop_flags")
(define-nk-func int nk-style-pop-color ((arg-0 (* nk-context-t))) "nk_style_pop_color")
(define-nk-func (& nk-color-t) nk-rgb ((r int) (g int) (b int)) "nk_rgb")
(define-nk-func (& nk-color-t) nk-rgb-iv ((rgb (* int))) "nk_rgb_iv")
(define-nk-func (& nk-color-t) nk-rgb-bv ((rgb (* nk-byte-t))) "nk_rgb_bv")
(define-nk-func (& nk-color-t) nk-rgb-f ((r float) (g float) (b float)) "nk_rgb_f")
(define-nk-func (& nk-color-t) nk-rgb-fv ((rgb (* float))) "nk_rgb_fv")
(define-nk-func (& nk-color-t) nk-rgb-cf ((c (& nk-colorf-t))) "nk_rgb_cf")
(define-nk-func (& nk-color-t) nk-rgb-hex ((rgb string)) "nk_rgb_hex")
(define-nk-func (& nk-color-t) nk-rgba ((r int) (g int) (b int) (a int)) "nk_rgba")
(define-nk-func (& nk-color-t) nk-rgba-u32 ((arg-0 nk-uint-t)) "nk_rgba_u32")
(define-nk-func (& nk-color-t) nk-rgba-iv ((rgba (* int))) "nk_rgba_iv")
(define-nk-func (& nk-color-t) nk-rgba-bv ((rgba (* nk-byte-t))) "nk_rgba_bv")
(define-nk-func (& nk-color-t) nk-rgba-f ((r float) (g float) (b float) (a float)) "nk_rgba_f")
(define-nk-func (& nk-color-t) nk-rgba-fv ((rgba (* float))) "nk_rgba_fv")
(define-nk-func (& nk-color-t) nk-rgba-cf ((c (& nk-colorf-t))) "nk_rgba_cf")
(define-nk-func (& nk-color-t) nk-rgba-hex ((rgb string)) "nk_rgba_hex")
(define-nk-func (& nk-colorf-t) nk-hsva-colorf ((h float) (s float) (v float) (a float)) "nk_hsva_colorf")
(define-nk-func (& nk-colorf-t) nk-hsva-colorfv ((c (* float))) "nk_hsva_colorfv")
(define-nk-func void nk-colorf-hsva-f ((out_h (* float)) (out_s (* float)) (out_v (* float)) (out_a (* float)) (in (& nk-colorf-t))) "nk_colorf_hsva_f")
(define-nk-func void nk-colorf-hsva-fv ((hsva (* float)) (in (& nk-colorf-t))) "nk_colorf_hsva_fv")
(define-nk-func (& nk-color-t) nk-hsv ((h int) (s int) (v int)) "nk_hsv")
(define-nk-func (& nk-color-t) nk-hsv-iv ((hsv (* int))) "nk_hsv_iv")
(define-nk-func (& nk-color-t) nk-hsv-bv ((hsv (* nk-byte-t))) "nk_hsv_bv")
(define-nk-func (& nk-color-t) nk-hsv-f ((h float) (s float) (v float)) "nk_hsv_f")
(define-nk-func (& nk-color-t) nk-hsv-fv ((hsv (* float))) "nk_hsv_fv")
(define-nk-func (& nk-color-t) nk-hsva ((h int) (s int) (v int) (a int)) "nk_hsva")
(define-nk-func (& nk-color-t) nk-hsva-iv ((hsva (* int))) "nk_hsva_iv")
(define-nk-func (& nk-color-t) nk-hsva-bv ((hsva (* nk-byte-t))) "nk_hsva_bv")
(define-nk-func (& nk-color-t) nk-hsva-f ((h float) (s float) (v float) (a float)) "nk_hsva_f")
(define-nk-func (& nk-color-t) nk-hsva-fv ((hsva (* float))) "nk_hsva_fv")
(define-nk-func void nk-color-f ((r (* float)) (g (* float)) (b (* float)) (a (* float)) (arg-4 (& nk-color-t))) "nk_color_f")
(define-nk-func void nk-color-fv ((rgba_out (* float)) (arg-1 (& nk-color-t))) "nk_color_fv")
(define-nk-func (& nk-colorf-t) nk-color-cf ((arg-0 (& nk-color-t))) "nk_color_cf")
(define-nk-func void nk-color-d ((r (* double)) (g (* double)) (b (* double)) (a (* double)) (arg-4 (& nk-color-t))) "nk_color_d")
(define-nk-func void nk-color-dv ((rgba_out (* double)) (arg-1 (& nk-color-t))) "nk_color_dv")
(define-nk-func nk-uint-t nk-color-u32 ((arg-0 (& nk-color-t))) "nk_color_u32")
(define-nk-func void nk-color-hex-rgba ((output string) (arg-1 (& nk-color-t))) "nk_color_hex_rgba")
(define-nk-func void nk-color-hex-rgb ((output string) (arg-1 (& nk-color-t))) "nk_color_hex_rgb")
(define-nk-func void nk-color-hsv-i ((out_h (* int)) (out_s (* int)) (out_v (* int)) (arg-3 (& nk-color-t))) "nk_color_hsv_i")
(define-nk-func void nk-color-hsv-b ((out_h (* nk-byte-t)) (out_s (* nk-byte-t)) (out_v (* nk-byte-t)) (arg-3 (& nk-color-t))) "nk_color_hsv_b")
(define-nk-func void nk-color-hsv-iv ((hsv_out (* int)) (arg-1 (& nk-color-t))) "nk_color_hsv_iv")
(define-nk-func void nk-color-hsv-bv ((hsv_out (* nk-byte-t)) (arg-1 (& nk-color-t))) "nk_color_hsv_bv")
(define-nk-func void nk-color-hsv-f ((out_h (* float)) (out_s (* float)) (out_v (* float)) (arg-3 (& nk-color-t))) "nk_color_hsv_f")
(define-nk-func void nk-color-hsv-fv ((hsv_out (* float)) (arg-1 (& nk-color-t))) "nk_color_hsv_fv")
(define-nk-func void nk-color-hsva-i ((h (* int)) (s (* int)) (v (* int)) (a (* int)) (arg-4 (& nk-color-t))) "nk_color_hsva_i")
(define-nk-func void nk-color-hsva-b ((h (* nk-byte-t)) (s (* nk-byte-t)) (v (* nk-byte-t)) (a (* nk-byte-t)) (arg-4 (& nk-color-t))) "nk_color_hsva_b")
(define-nk-func void nk-color-hsva-iv ((hsva_out (* int)) (arg-1 (& nk-color-t))) "nk_color_hsva_iv")
(define-nk-func void nk-color-hsva-bv ((hsva_out (* nk-byte-t)) (arg-1 (& nk-color-t))) "nk_color_hsva_bv")
(define-nk-func void nk-color-hsva-f ((out_h (* float)) (out_s (* float)) (out_v (* float)) (out_a (* float)) (arg-4 (& nk-color-t))) "nk_color_hsva_f")
(define-nk-func void nk-color-hsva-fv ((hsva_out (* float)) (arg-1 (& nk-color-t))) "nk_color_hsva_fv")
(define-nk-func (& nk-handle-t) nk-handle-ptr ((arg-0 void*)) "nk_handle_ptr")
(define-nk-func (& nk-handle-t) nk-handle-id ((arg-0 int)) "nk_handle_id")
(define-nk-func (& nk-image-t) nk-image-handle ((arg-0 (& nk-handle-t))) "nk_image_handle")
(define-nk-func (& nk-image-t) nk-image-ptr ((arg-0 void*)) "nk_image_ptr")
(define-nk-func (& nk-image-t) nk-image-id ((arg-0 int)) "nk_image_id")
(define-nk-func int nk-image-is-subimage ((img (* nk-image-t))) "nk_image_is_subimage")
(define-nk-func (& nk-image-t) nk-subimage-ptr ((arg-0 void*) (w unsigned-short) (h unsigned-short) (sub_region (& nk-rect-t))) "nk_subimage_ptr")
(define-nk-func (& nk-image-t) nk-subimage-id ((arg-0 int) (w unsigned-short) (h unsigned-short) (sub_region (& nk-rect-t))) "nk_subimage_id")
(define-nk-func (& nk-image-t) nk-subimage-handle ((arg-0 (& nk-handle-t)) (w unsigned-short) (h unsigned-short) (sub_region (& nk-rect-t))) "nk_subimage_handle")
(define-nk-func nk-hash-t nk-murmur-hash ((key void*) (len int) (seed nk-hash-t)) "nk_murmur_hash")
(define-nk-func void nk-triangle-from-direction ((result (* nk-vec2-t)) (r (& nk-rect-t)) (pad_x float) (pad_y float) (arg-4 unsigned-int)) "nk_triangle_from_direction")
(define-nk-func (& nk-vec2-t) nk-vec2 ((x float) (y float)) "nk_vec2")
(define-nk-func (& nk-vec2-t) nk-vec2i ((x int) (y int)) "nk_vec2i")
(define-nk-func (& nk-vec2-t) nk-vec2v ((xy (* float))) "nk_vec2v")
(define-nk-func (& nk-vec2-t) nk-vec2iv ((xy (* int))) "nk_vec2iv")
(define-nk-func (& nk-rect-t) nk-get-null-rect () "nk_get_null_rect")
(define-nk-func (& nk-rect-t) nk-rect ((x float) (y float) (w float) (h float)) "nk_rect")
(define-nk-func (& nk-rect-t) nk-recti ((x int) (y int) (w int) (h int)) "nk_recti")
(define-nk-func (& nk-rect-t) nk-recta ((pos (& nk-vec2-t)) (size (& nk-vec2-t))) "nk_recta")
(define-nk-func (& nk-rect-t) nk-rectv ((xywh (* float))) "nk_rectv")
(define-nk-func (& nk-rect-t) nk-rectiv ((xywh (* int))) "nk_rectiv")
(define-nk-func (& nk-vec2-t) nk-rect-pos ((arg-0 (& nk-rect-t))) "nk_rect_pos")
(define-nk-func (& nk-vec2-t) nk-rect-size ((arg-0 (& nk-rect-t))) "nk_rect_size")
(define-nk-func int nk-strlen ((str string)) "nk_strlen")
(define-nk-func int nk-stricmp ((s1 string) (s2 string)) "nk_stricmp")
(define-nk-func int nk-stricmpn ((s1 string) (s2 string) (n int)) "nk_stricmpn")
(define-nk-func int nk-strtoi ((str string) (endptr void*)) "nk_strtoi")
(define-nk-func float nk-strtof ((str string) (endptr void*)) "nk_strtof")
(define-nk-func double nk-strtod ((str string) (endptr void*)) "nk_strtod")
(define-nk-func int nk-strfilter ((text string) (regexp string)) "nk_strfilter")
(define-nk-func int nk-strmatch-fuzzy-string ((str string) (pattern string) (out_score (* int))) "nk_strmatch_fuzzy_string")
(define-nk-func int nk-strmatch-fuzzy-text ((txt string) (txt_len int) (pattern string) (out_score (* int))) "nk_strmatch_fuzzy_text")
(define-nk-func int nk-utf-decode ((arg-0 string) (arg-1 (* nk-rune-t)) (arg-2 int)) "nk_utf_decode")
(define-nk-func int nk-utf-encode ((arg-0 nk-rune-t) (arg-1 string) (arg-2 int)) "nk_utf_encode")
(define-nk-func int nk-utf-len ((arg-0 string) (byte_len int)) "nk_utf_len")
(define-nk-func string nk-utf-at ((buffer string) (length int) (index int) (unicode (* nk-rune-t)) (len (* int))) "nk_utf_at")
(define-nk-func void nk-buffer-init ((arg-0 (* nk-buffer-t)) (arg-1 (* nk-allocator-t)) (size nk-size-t)) "nk_buffer_init")
(define-nk-func void nk-buffer-init-fixed ((arg-0 (* nk-buffer-t)) (memory void*) (size nk-size-t)) "nk_buffer_init_fixed")
(define-nk-func void nk-buffer-info ((arg-0 (* nk-memory-status-t)) (arg-1 (* nk-buffer-t))) "nk_buffer_info")
(define-nk-func void nk-buffer-push ((arg-0 (* nk-buffer-t)) (type unsigned-int) (memory void*) (size nk-size-t) (align nk-size-t)) "nk_buffer_push")
(define-nk-func void nk-buffer-mark ((arg-0 (* nk-buffer-t)) (type unsigned-int)) "nk_buffer_mark")
(define-nk-func void nk-buffer-reset ((arg-0 (* nk-buffer-t)) (type unsigned-int)) "nk_buffer_reset")
(define-nk-func void nk-buffer-clear ((arg-0 (* nk-buffer-t))) "nk_buffer_clear")
(define-nk-func void nk-buffer-free ((arg-0 (* nk-buffer-t))) "nk_buffer_free")
(define-nk-func void* nk-buffer-memory ((arg-0 (* nk-buffer-t))) "nk_buffer_memory")
(define-nk-func void* nk-buffer-memory-const ((arg-0 (* nk-buffer-t))) "nk_buffer_memory_const")
(define-nk-func nk-size-t nk-buffer-total ((arg-0 (* nk-buffer-t))) "nk_buffer_total")
(define-nk-func void nk-str-init ((arg-0 (* nk-str-t)) (arg-1 (* nk-allocator-t)) (size nk-size-t)) "nk_str_init")
(define-nk-func void nk-str-init-fixed ((arg-0 (* nk-str-t)) (memory void*) (size nk-size-t)) "nk_str_init_fixed")
(define-nk-func void nk-str-clear ((arg-0 (* nk-str-t))) "nk_str_clear")
(define-nk-func void nk-str-free ((arg-0 (* nk-str-t))) "nk_str_free")
(define-nk-func int nk-str-append-text-char ((arg-0 (* nk-str-t)) (arg-1 string) (arg-2 int)) "nk_str_append_text_char")
(define-nk-func int nk-str-append-str-char ((arg-0 (* nk-str-t)) (arg-1 string)) "nk_str_append_str_char")
(define-nk-func int nk-str-append-text-utf8 ((arg-0 (* nk-str-t)) (arg-1 string) (arg-2 int)) "nk_str_append_text_utf8")
(define-nk-func int nk-str-append-str-utf8 ((arg-0 (* nk-str-t)) (arg-1 string)) "nk_str_append_str_utf8")
(define-nk-func int nk-str-append-text-runes ((arg-0 (* nk-str-t)) (arg-1 (* nk-rune-t)) (arg-2 int)) "nk_str_append_text_runes")
(define-nk-func int nk-str-append-str-runes ((arg-0 (* nk-str-t)) (arg-1 (* nk-rune-t))) "nk_str_append_str_runes")
(define-nk-func int nk-str-insert-at-char ((arg-0 (* nk-str-t)) (pos int) (arg-2 string) (arg-3 int)) "nk_str_insert_at_char")
(define-nk-func int nk-str-insert-at-rune ((arg-0 (* nk-str-t)) (pos int) (arg-2 string) (arg-3 int)) "nk_str_insert_at_rune")
(define-nk-func int nk-str-insert-text-char ((arg-0 (* nk-str-t)) (pos int) (arg-2 string) (arg-3 int)) "nk_str_insert_text_char")
(define-nk-func int nk-str-insert-str-char ((arg-0 (* nk-str-t)) (pos int) (arg-2 string)) "nk_str_insert_str_char")
(define-nk-func int nk-str-insert-text-utf8 ((arg-0 (* nk-str-t)) (pos int) (arg-2 string) (arg-3 int)) "nk_str_insert_text_utf8")
(define-nk-func int nk-str-insert-str-utf8 ((arg-0 (* nk-str-t)) (pos int) (arg-2 string)) "nk_str_insert_str_utf8")
(define-nk-func int nk-str-insert-text-runes ((arg-0 (* nk-str-t)) (pos int) (arg-2 (* nk-rune-t)) (arg-3 int)) "nk_str_insert_text_runes")
(define-nk-func int nk-str-insert-str-runes ((arg-0 (* nk-str-t)) (pos int) (arg-2 (* nk-rune-t))) "nk_str_insert_str_runes")
(define-nk-func void nk-str-remove-chars ((arg-0 (* nk-str-t)) (len int)) "nk_str_remove_chars")
(define-nk-func void nk-str-remove-runes ((str (* nk-str-t)) (len int)) "nk_str_remove_runes")
(define-nk-func void nk-str-delete-chars ((arg-0 (* nk-str-t)) (pos int) (len int)) "nk_str_delete_chars")
(define-nk-func void nk-str-delete-runes ((arg-0 (* nk-str-t)) (pos int) (len int)) "nk_str_delete_runes")
(define-nk-func string nk-str-at-char ((arg-0 (* nk-str-t)) (pos int)) "nk_str_at_char")
(define-nk-func string nk-str-at-rune ((arg-0 (* nk-str-t)) (pos int) (unicode (* nk-rune-t)) (len (* int))) "nk_str_at_rune")
(define-nk-func nk-rune-t nk-str-rune-at ((arg-0 (* nk-str-t)) (pos int)) "nk_str_rune_at")
(define-nk-func string nk-str-at-char-const ((arg-0 (* nk-str-t)) (pos int)) "nk_str_at_char_const")
(define-nk-func string nk-str-at-const ((arg-0 (* nk-str-t)) (pos int) (unicode (* nk-rune-t)) (len (* int))) "nk_str_at_const")
(define-nk-func string nk-str-get ((arg-0 (* nk-str-t))) "nk_str_get")
(define-nk-func string nk-str-get-const ((arg-0 (* nk-str-t))) "nk_str_get_const")
(define-nk-func int nk-str-len ((arg-0 (* nk-str-t))) "nk_str_len")
(define-nk-func int nk-str-len-char ((arg-0 (* nk-str-t))) "nk_str_len_char")
(define-nk-func int nk-filter-default ((arg-0 (* nk-text-edit-t)) (unicode nk-rune-t)) "nk_filter_default")
(define-nk-func int nk-filter-ascii ((arg-0 (* nk-text-edit-t)) (unicode nk-rune-t)) "nk_filter_ascii")
(define-nk-func int nk-filter-float ((arg-0 (* nk-text-edit-t)) (unicode nk-rune-t)) "nk_filter_float")
(define-nk-func int nk-filter-decimal ((arg-0 (* nk-text-edit-t)) (unicode nk-rune-t)) "nk_filter_decimal")
(define-nk-func int nk-filter-hex ((arg-0 (* nk-text-edit-t)) (unicode nk-rune-t)) "nk_filter_hex")
(define-nk-func int nk-filter-oct ((arg-0 (* nk-text-edit-t)) (unicode nk-rune-t)) "nk_filter_oct")
(define-nk-func int nk-filter-binary ((arg-0 (* nk-text-edit-t)) (unicode nk-rune-t)) "nk_filter_binary")
(define-nk-func void nk-textedit-init ((arg-0 (* nk-text-edit-t)) (arg-1 (* nk-allocator-t)) (size nk-size-t)) "nk_textedit_init")
(define-nk-func void nk-textedit-init-fixed ((arg-0 (* nk-text-edit-t)) (memory void*) (size nk-size-t)) "nk_textedit_init_fixed")
(define-nk-func void nk-textedit-free ((arg-0 (* nk-text-edit-t))) "nk_textedit_free")
(define-nk-func void nk-textedit-text ((arg-0 (* nk-text-edit-t)) (arg-1 string) (total_len int)) "nk_textedit_text")
(define-nk-func void nk-textedit-delete ((arg-0 (* nk-text-edit-t)) (where int) (len int)) "nk_textedit_delete")
(define-nk-func void nk-textedit-delete-selection ((arg-0 (* nk-text-edit-t))) "nk_textedit_delete_selection")
(define-nk-func void nk-textedit-select-all ((arg-0 (* nk-text-edit-t))) "nk_textedit_select_all")
(define-nk-func int nk-textedit-cut ((arg-0 (* nk-text-edit-t))) "nk_textedit_cut")
(define-nk-func int nk-textedit-paste ((arg-0 (* nk-text-edit-t)) (arg-1 string) (len int)) "nk_textedit_paste")
(define-nk-func void nk-textedit-undo ((arg-0 (* nk-text-edit-t))) "nk_textedit_undo")
(define-nk-func void nk-textedit-redo ((arg-0 (* nk-text-edit-t))) "nk_textedit_redo")
(define-nk-func void nk-stroke-line ((b (* nk-command-buffer-t)) (x0 float) (y0 float) (x1 float) (y1 float) (line_thickness float) (arg-6 (& nk-color-t))) "nk_stroke_line")
(define-nk-func void nk-stroke-curve ((arg-0 (* nk-command-buffer-t)) (arg-1 float) (arg-2 float) (arg-3 float) (arg-4 float) (arg-5 float) (arg-6 float) (arg-7 float) (arg-8 float) (line_thickness float) (arg-10 (& nk-color-t))) "nk_stroke_curve")
(define-nk-func void nk-stroke-rect ((arg-0 (* nk-command-buffer-t)) (arg-1 (& nk-rect-t)) (rounding float) (line_thickness float) (arg-4 (& nk-color-t))) "nk_stroke_rect")
(define-nk-func void nk-stroke-circle ((arg-0 (* nk-command-buffer-t)) (arg-1 (& nk-rect-t)) (line_thickness float) (arg-3 (& nk-color-t))) "nk_stroke_circle")
(define-nk-func void nk-stroke-arc ((arg-0 (* nk-command-buffer-t)) (cx float) (cy float) (radius float) (a_min float) (a_max float) (line_thickness float) (arg-7 (& nk-color-t))) "nk_stroke_arc")
(define-nk-func void nk-stroke-triangle ((arg-0 (* nk-command-buffer-t)) (arg-1 float) (arg-2 float) (arg-3 float) (arg-4 float) (arg-5 float) (arg-6 float) (line_thichness float) (arg-8 (& nk-color-t))) "nk_stroke_triangle")
(define-nk-func void nk-stroke-polyline ((arg-0 (* nk-command-buffer-t)) (points (* float)) (point_count int) (line_thickness float) (col (& nk-color-t))) "nk_stroke_polyline")
(define-nk-func void nk-stroke-polygon ((arg-0 (* nk-command-buffer-t)) (arg-1 (* float)) (point_count int) (line_thickness float) (arg-4 (& nk-color-t))) "nk_stroke_polygon")
(define-nk-func void nk-fill-rect ((arg-0 (* nk-command-buffer-t)) (arg-1 (& nk-rect-t)) (rounding float) (arg-3 (& nk-color-t))) "nk_fill_rect")
(define-nk-func void nk-fill-rect-multi-color ((arg-0 (* nk-command-buffer-t)) (arg-1 (& nk-rect-t)) (left (& nk-color-t)) (top (& nk-color-t)) (right (& nk-color-t)) (bottom (& nk-color-t))) "nk_fill_rect_multi_color")
(define-nk-func void nk-fill-circle ((arg-0 (* nk-command-buffer-t)) (arg-1 (& nk-rect-t)) (arg-2 (& nk-color-t))) "nk_fill_circle")
(define-nk-func void nk-fill-arc ((arg-0 (* nk-command-buffer-t)) (cx float) (cy float) (radius float) (a_min float) (a_max float) (arg-6 (& nk-color-t))) "nk_fill_arc")
(define-nk-func void nk-fill-triangle ((arg-0 (* nk-command-buffer-t)) (x0 float) (y0 float) (x1 float) (y1 float) (x2 float) (y2 float) (arg-7 (& nk-color-t))) "nk_fill_triangle")
(define-nk-func void nk-fill-polygon ((arg-0 (* nk-command-buffer-t)) (arg-1 (* float)) (point_count int) (arg-3 (& nk-color-t))) "nk_fill_polygon")
(define-nk-func void nk-draw-image ((arg-0 (* nk-command-buffer-t)) (arg-1 (& nk-rect-t)) (arg-2 (* nk-image-t)) (arg-3 (& nk-color-t))) "nk_draw_image")
(define-nk-func void nk-draw-text ((arg-0 (* nk-command-buffer-t)) (arg-1 (& nk-rect-t)) (text string) (len int) (arg-4 (* nk-user-font-t)) (arg-5 (& nk-color-t)) (arg-6 (& nk-color-t))) "nk_draw_text")
(define-nk-func void nk-push-scissor ((arg-0 (* nk-command-buffer-t)) (arg-1 (& nk-rect-t))) "nk_push_scissor")
(define-nk-func void nk-push-custom ((arg-0 (* nk-command-buffer-t)) (arg-1 (& nk-rect-t)) (arg-2 nk-command-custom-callback-t) (usr (* nk-handle-t))) "nk_push_custom")
(define-nk-func int nk-input-has-mouse-click ((arg-0 (* nk-input-t)) (arg-1 unsigned-int)) "nk_input_has_mouse_click")
(define-nk-func int nk-input-has-mouse-click-in-rect ((arg-0 (* nk-input-t)) (arg-1 unsigned-int) (arg-2 (& nk-rect-t))) "nk_input_has_mouse_click_in_rect")
(define-nk-func int nk-input-has-mouse-click-down-in-rect ((arg-0 (* nk-input-t)) (arg-1 unsigned-int) (arg-2 (& nk-rect-t)) (down int)) "nk_input_has_mouse_click_down_in_rect")
(define-nk-func int nk-input-is-mouse-click-in-rect ((arg-0 (* nk-input-t)) (arg-1 unsigned-int) (arg-2 (& nk-rect-t))) "nk_input_is_mouse_click_in_rect")
(define-nk-func int nk-input-is-mouse-click-down-in-rect ((i (* nk-input-t)) (id unsigned-int) (b (& nk-rect-t)) (down int)) "nk_input_is_mouse_click_down_in_rect")
(define-nk-func int nk-input-any-mouse-click-in-rect ((arg-0 (* nk-input-t)) (arg-1 (& nk-rect-t))) "nk_input_any_mouse_click_in_rect")
(define-nk-func int nk-input-is-mouse-prev-hovering-rect ((arg-0 (* nk-input-t)) (arg-1 (& nk-rect-t))) "nk_input_is_mouse_prev_hovering_rect")
(define-nk-func int nk-input-is-mouse-hovering-rect ((arg-0 (* nk-input-t)) (arg-1 (& nk-rect-t))) "nk_input_is_mouse_hovering_rect")
(define-nk-func int nk-input-mouse-clicked ((arg-0 (* nk-input-t)) (arg-1 unsigned-int) (arg-2 (& nk-rect-t))) "nk_input_mouse_clicked")
(define-nk-func int nk-input-is-mouse-down ((arg-0 (* nk-input-t)) (arg-1 unsigned-int)) "nk_input_is_mouse_down")
(define-nk-func int nk-input-is-mouse-pressed ((arg-0 (* nk-input-t)) (arg-1 unsigned-int)) "nk_input_is_mouse_pressed")
(define-nk-func int nk-input-is-mouse-released ((arg-0 (* nk-input-t)) (arg-1 unsigned-int)) "nk_input_is_mouse_released")
(define-nk-func int nk-input-is-key-pressed ((arg-0 (* nk-input-t)) (arg-1 unsigned-int)) "nk_input_is_key_pressed")
(define-nk-func int nk-input-is-key-released ((arg-0 (* nk-input-t)) (arg-1 unsigned-int)) "nk_input_is_key_released")
(define-nk-func int nk-input-is-key-down ((arg-0 (* nk-input-t)) (arg-1 unsigned-int)) "nk_input_is_key_down")
(define-nk-func (& nk-style-item-t) nk-style-item-image ((img (& nk-image-t))) "nk_style_item_image")
(define-nk-func (& nk-style-item-t) nk-style-item-color ((arg-0 (& nk-color-t))) "nk_style_item_color")
(define-nk-func (& nk-style-item-t) nk-style-item-hide () "nk_style_item_hide")
